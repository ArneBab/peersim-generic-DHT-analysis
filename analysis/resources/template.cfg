# Random value used to seed RNG, can repeat experiement if value set
random.seed $random_seed
END 10^6
simulation.endtime END
simulation.logtime END

simulation.experiments $experiment_count

SIZE $size

network.size SIZE

protocol.link peersim.core.IdleProtocol

protocol.no_delay UniformRandomTransport
{
	mindelay 0
	maxdelay 0
}

# N Hop look ahead routing table
protocol.my_routing_table NHopRoutingTable
{
    hops $look_ahead
}

protocol.greedy_router DHTRouterGreedy
{
    route_storage_file $routing_data_path
}

protocol.generic_dht DHTProtocol
{
	topology link
	transport no_delay
	router greedy_router
	routing_table my_routing_table
}

# generate traffic
control.traffic RandomPingPongTraffic
{
	protocol generic_dht
	step 100
}

# wire up the topology
init.0 WireKOut
{
    k 3
    undir
    protocol link
}

# configure # of adversaries
init.1 AdversaryManager
{
	count $adversary_count
	protocol generic_dht
}

control.graphfile DHTGraphPrinter
{
	outf $graph_data_path/
	dht generic_dht
	protocol link
	step 100000
	undir
}

control.stats GlobalStatsObserver
{
	protocol generic_dht
	outf $graph_data_path/
	step 100000
}

#control.dnet DynamicNetwork
#{
#	add 20
#	add -25
#	minsize 3000
#	maxsize 7000
#	step 100000
#	init.0 ChordInitializer
#	{      
#		protocol my
#	}
#}
