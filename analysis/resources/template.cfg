# Random value used to seed RNG, can repeat experiement if value set
random.seed $random_seed
END 10^6
simulation.endtime END
simulation.logtime END

simulation.experiments $experiment_count

SIZE $size

network.size SIZE

protocol.link peersim.core.IdleProtocol

protocol.delay UniformRandomTransport
{
	mindelay 0
	maxdelay 0
}

# N Hop look ahead routing table
protocol.my_routing_table NHopRoutingTable
{
    hops $look_ahead
}

protocol.router $router_type
{
    route_storage_file $routing_data_path
	can_backtrack $router_can_backtrack
	drop_rate $router_drop_rate
	loop_detection $router_loop_detection
	max_route_length 50
	# only read by greedy router
	randomness $router_randomness
}

protocol.generic_dht DHTProtocol
{
	topology link
	transport delay
	router router
	routing_table my_routing_table
}

# generate traffic
control.traffic $traffic_generator
{
	protocol generic_dht
	step $traffic_step
}

# load topology from file
init.0 TopologyLoader
{
    protocol generic_dht
    topology link
    gml_file $topology_file
}

# configure # of adversaries
init.1 AdversaryManager
{
	count $adversary_count
	protocol generic_dht
}

control.graphfile DHTGraphPrinter
{
	outf $graph_data_path/
	dht generic_dht
	protocol link
	step 100000
	undir
}

control.stats GlobalStatsObserver
{
	protocol generic_dht
	outf $graph_data_path/
	step 100000
}

#control.dnet DynamicNetwork
#{
#	add 20
#	add -25
#	minsize 3000
#	maxsize 7000
#	step 100000
#	init.0 ChordInitializer
#	{      
#		protocol my
#	}
#}
